// EXCEPT WHERE OTHERWISE STATED, THE INFORMATION AND SOURCE CODE CONTAINED
// HEREIN AND IN RELATED FILES IS THE EXCLUSIVE PROPERTY OF PARAGON SOFTWARE
// GROUP COMPANY AND MAY NOT BE EXAMINED, DISTRIBUTED, DISCLOSED, OR REPRODUCED
// IN WHOLE OR IN PART WITHOUT EXPLICIT WRITTEN AUTHORIZATION FROM THE COMPANY.
//
// Copyright (c) 1994-2016 Paragon Software Group, All rights reserved.
//
// UNLESS OTHERWISE AGREED IN A WRITING SIGNED BY THE PARTIES, THIS SOFTWARE IS
// PROVIDED "AS-IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE, ALL OF WHICH ARE HEREBY DISCLAIMED. IN NO EVENT SHALL THE
// AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.

#include <imageanalyzer/core/IImage.hpp>

#include <gtest/gtest.h>

//--------------------------------------------------
using namespace imageanalyzer::core;

class TColor_test
    :public ::testing::Test
{
public:
    void SetUp()
    {}
};

TEST_F(TColor_test, operator_equal)
{
    ASSERT_EQ(true, TColor(1,2,3) == TColor(1,2,3));
}

TEST_F(TColor_test, operator_notequal_1)
{
    ASSERT_EQ(false, TColor(255, 2, 3) == TColor(1, 2, 3));
}

TEST_F(TColor_test, operator_notequal_2)
{
    ASSERT_EQ(false, TColor(1, 255, 3) == TColor(1, 2, 3));
}

TEST_F(TColor_test, operator_notequal_3)
{
    ASSERT_EQ(false, TColor(1, 2, 255) == TColor(1, 2, 3));
}

TEST_F(TColor_test, operator_notequal_4)
{
    ASSERT_EQ(false, TColor(0, 1, 2, 3) == TColor(255, 1, 2, 3));
}

TEST_F(TColor_test, To_RGB)
{
    ASSERT_EQ(0xFF7F50, TColor(255, 127, 80).To_RGB());
}

TEST_F(TColor_test, To_RGBA)
{
    ASSERT_EQ(0xFF7F5080, TColor(128, 255, 127, 80).To_RGBA());
}

TEST_F(TColor_test, To_ARGB)
{
    ASSERT_EQ(0x80FF7F50, TColor(128, 255, 127, 80).To_ARGB());
}

TEST_F(TColor_test, From_RGB)
{
    ASSERT_EQ(TColor(255, 127, 80), TColor::FromRGB(0xFF7F50));
}

TEST_F(TColor_test, From_RGBA)
{
    ASSERT_EQ(TColor(128, 255, 127, 80), TColor::FromRGBA(0xFF7F5080));
}

TEST_F(TColor_test, From_ARGB)
{
    ASSERT_EQ(TColor(128, 255, 127, 80), TColor::FromARGB(0x80FF7F50));
}
